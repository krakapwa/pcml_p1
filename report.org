#+STARTUP: latexpreview
#+LATEX_HEADER: \usepackage{bm}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \graphicspath{{pics/}}
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \documentclass[10pt,conference,compsocconf]{IEEEtran}
#+LATEX_CLASS: IEEEtran

# Local Variables:
# org-ref-default-bibliography: refs.bib
# End:
#+TITLE: Higgs Boson classification
#+AUTHOR: Laurent Lejeune, Tatiana Fountoukidou, Guillaume de Montauzon
#+OPTIONS: toc:nil        no default TOC at all
* Introduction 
*  Data pre-processing and exploration
** Data clean-up
About 70% of the samples contain missing values. Replacing missing values by the expectation over the valid samples leads to a distortion of the variable's distribution, which introduces a severe bias in regression procedures. The strategies that were implemented and tested are now introduced.

*** Least-squares regression

*** Attribute removal
Among the 30 attributes given in the datasets, 11 contain missing values. The most straight-forward appraoch is to remove those attributes from the sets and thus reduce the dimensionality of the problem.

*** K-Nearest-Neighbors regression
 A variant of the K-Nearest-Neighbors algorithm was implemented to fill-in missing values cite:malarvizhi12. To alleviate the computational cost, a random uniform sampling of the valid samples (samples without missing values) was performed prior to the nearest neighbors search.
 The missing values are replaced by the weighted average value over its K nearest neighbors using Euclidean distance. 

** Data preparation
Computing the eigen-values of the covariance matrix reveals that the second highest eigen value is xxx% smaller than the highest.

** Analysis of missing values
   The class probabilities given the presence or absence of missing values are computed on the training set. 
- $P(Y=1|X \text{has missing attributes}) \approx 0.30$
- $P(Y=-1|X \text{has missing attributes}) \approx 0.70$
- $P(Y=1|X \text{has no missing attributes}) \approx 0.47$
- $P(Y=-1|X \text{has no missing attributes}) \approx 0.53$

The above results justifies the choice of adding an indicator variable $x_{miss}$ that takes value 0 if no attributes are missing and 1 otherwise.

* Methods
** AdaBoost with decision stumps
The idea of adding weak learners in a stage-wise manner to produce a strong classifier is commonly referred to as boosting. Discrete AdaBoost, described in cite:friedman98, consists in adapting the weights of samples based on the missclassification error. The goal is to penalize missclassified samples and re-inject the weights for the computation of the next stage.

\begin{algorithm}
\caption{Discrete AdaBoost}
\label{CHalgorithm}
\begin{algorithmic}[1]
\State Start with weights $w_i = \frac{1}{N}, i=1,...,N$
\For{ $t=1,2,...,T$}
\State Fit the classifier $h_t(\bm{x}) \in \{-1,1\}$ using weights $w_i$
\State Compute $\bm{e}_t = \sum_{i=1}^N{\bm{w}_i,t}$, where $h_t(x_i) \neq y_i$
\State Choose $\alpha_t = \frac{1}{2} \log{\frac{1-\bm{e}_t}{\bm{e}_t}}$
\State Add to ensemble: $\bm{F}_t(\bm{x}) = \bm{F}_{t-1}(\bm{x}) + \alpha_t h_t(x)$ 
\State Update weights: $\bm{w}_{i,t+1} = \bm{w}_{i,t} e^{-\bm{y}_i \alpha_t \bm{h}_t(x)}$ 
\State Renormalize $\bm{w}_{i,t+1}$ such that $\sum_i{\bm{w}_{i,t+1}} = 1$
\EndFor
\EndProcedure
\end{algorithmic}
\end{algorithm}

A very simple version of AdaBoost was implemented that finds optimal decision stumps as weak-learners, that is, thresholding function that best separates the positive and negative classes based on a single attribute.
